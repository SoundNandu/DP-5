
#A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

#The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

#How many possible unique paths are there?
Time complexity:O(mn)
Space complexity:O(1)





class Solution(object):
    def uniquePaths(self, m, n):
        mat = [[0]*m for i in range(n)]
        
        #there is one possible way so we are filling it to 1 in the columns and row
        #row
        for i in range(m):
            mat[0][i] = 1
        #column
        for i in range(n):
            mat[i][0] = 1
        #we start the from 1 becuase already the first col and row are filled with  value 1   
        for col in range(1,n):
            for row in range(1,m):
                #we to add the diagnal value to of the matrix to find the different ways
              
                mat[col][row] = mat[col-1][row]+mat[col][row-1]
         #return the last value in the matrix 
        return mat[n-1][m-1]  
